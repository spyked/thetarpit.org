;; Tarpit Lisp Blog Scaffolding -- default template
;;
;; TODO: Make a macro to obtain general forms such as the ones below
(defun tlbs-make-default (blist)
  (let* ((title (gethash "title" blist))
         (body (gethash "body" blist))
         (new-body
          (with-output-to-string (out)
            (cl-who:with-html-output (out nil :prologue t :indent nil)
              ; Format a simple web page
              (:html
               (:head
                ; TODO: Import MathJax script
                (:meta :http-equiv "Content-Type"
                       :content "text/html; charset=UTF-8")
                (:title "The Tar Pit - " (cl-who:str title))
                (:link :href "/rss.xml" :rel "alternate"
                       :type "application/rss+xml" :title "RSS")
                (:link :href "/css/fonts.css" :rel "stylesheet"
                       :type "text/css")
                (:link :href "/css/default.css" :rel "stylesheet"
                       :type "text/css")
                (:link :href "/css/syntax.css" :rel "stylesheet"
                       :type "text/css")
                ; XXX we're depending on this imported MathJax turd
                ; until we can get a minimal version of it up and
                ; running.
                (:script :type "text/javascript"
                         :src "http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"))
               (:body
                ; XXX: Can break this into smaller pieces
                (cl-who:htm
                 (:ul :id "header"
                      (:li
                       (:a :href "/" "The Tar Pit")))
                 (:ul :id "navigation"
                      (:a :href "/about.html" "about")
                      (:a :href "/archive.html" "archive")
                      (:a :href "/rss.xml" "rss"))
                 (:div :id "content"
                       (:h1 (cl-who:str title))
                       (cl-who:str body))
                 (:div :id "footer"
                  "Tarpit boringly generated by Common Lisp and tarpit-lbs; "
                   (:a :href "http://creativecommons.org/licenses/by-nc-sa/3.0/"
                           "by-nc-sa")))))))))
    (setf (gethash "body" blist) new-body)
    blist))
